1. Calculate hottest and coolest month from ncdc data.

CREATE TABLE ncdc_month (
yr SMALLINT,
month SMALLINT,
temp SMALLINT,
quality TINYINT
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'
WITH SERDEPROPERTIES (
  'input.regex' = '^.{15}([0-9]{4})([0-9]{2}).{66}([-\+][0-9]{4})([0-9]).*$'
)
STORED AS TEXTFILE;

LOAD DATA LOCAL INPATH '/home/sunbeam/Desktop/Modules/BigData/data/ncdc' INTO TABLE ncdc_month;

(SELECT 'Cool' label, yr, month, MIN(temp) mintemp FROM ncdc_month
WHERE temp != 9999
AND quality IN (0, 1, 2, 4, 5, 9)
GROUP BY yr,month
ORDER BY mintemp
LIMIT 1)
UNION
(SELECT 'Hot' label, yr, month, MAX(temp) maxtemp FROM ncdc_month
WHERE temp != 9999
AND quality IN (0, 1, 2, 4, 5, 9)
GROUP BY yr,month
ORDER BY maxtemp DESC
LIMIT 1);

+------------+---------+------------+--------------+
| _u1.label  | _u1.yr  | _u1.month  | _u1.mintemp  |
+------------+---------+------------+--------------+
| Cool       | 1917    | 2          | -478         |
| Hot        | 1919    | 7          | 378          |
+------------+---------+------------+--------------+


2. Execute following queries on "emp" and "dept" dataset.
    1. Create table "emp_staging" and load data from emp.csv in it.
    
CREATE TABLE emp_staging(
empno INT,
ename STRING,
job STRING,
mgr INT,
hire DATE,
sal DOUBLE,
comm DOUBLE,
deptno INT
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

LOAD DATA LOCAL INPATH '/home/sunbeam/Desktop/Modules/BigData/data/emp.csv' INTO emp_staging;


    
    2. Create table "dept_staging" and load data from dept.csv in it.
    
CREATE TABLE dept_staging(
deptno INT,
dname STRING,
loc STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

LOAD DATA LOCAL INPATH '/home/sunbeam/Desktop/Modules/BigData/data/dept.csv' INTO dept_staging;
    
    3. Display dept name and number of emps in each dept.
    
with emp_count as
(select deptno,count(empno) cnt from emp_staging group by deptno)
select dname, coalesce(cnt,0) from dept_staging d
left join emp_count e on e.deptno = d.deptno;
+-------------+------+
|    dname    | _c1  |
+-------------+------+
| ACCOUNTING  | 3    |
| RESEARCH    | 5    |
| SALES       | 6    |
| OPERATIONS  | 0    |
+-------------+------+


    
    4. Display emp name and his dept name.
    
 select ename, dname from emp_staging e
 inner join dept_staging d on d.deptno = e.deptno;
+---------+-------------+
|  ename  |    dname    |
+---------+-------------+
| SMITH   | RESEARCH    |
| ALLEN   | SALES       |
| WARD    | SALES       |
| JONES   | RESEARCH    |
| MARTIN  | SALES       |
| BLAKE   | SALES       |
| CLARK   | ACCOUNTING  |
| SCOTT   | RESEARCH    |
| KING    | ACCOUNTING  |
| TURNER  | SALES       |
| ADAMS   | RESEARCH    |
| JAMES   | SALES       |
| FORD    | RESEARCH    |
| MILLER  | ACCOUNTING  |
+---------+-------------+

    
    5. Display all emps (name, job, deptno) with their manager (name, job, deptno), who are not in their department.
    
select e1.ename,e1.job,e1.deptno,e2.ename mname,e2.job,e2.deptno from emp_staging e1
inner join emp_staging e2 on e1.mgr = e2.empno
where e1.deptno != e2.deptno;
| e1.ename  |  e1.job  | e1.deptno  | mname  |   e2.job   | e2.deptno  |
+-----------+----------+------------+--------+------------+------------+
| JONES     | MANAGER  | 20         | KING   | PRESIDENT  | 10         |
| BLAKE     | MANAGER  | 30         | KING   | PRESIDENT  | 10         |
+-----------+----------+------------+--------+------------+------------+

    
    6. Display all manager names with list of all dept names (where they can work).
    
select distinct e2.ename as mname, dname from emp_staging e1
inner join emp_staging e2 on e1.mgr = e2.empno
inner join dept_staging d on e2.deptno = d.deptno;
+--------+-------------+
| mname  |    dname    |
+--------+-------------+
| BLAKE  | SALES       |
| CLARK  | ACCOUNTING  |
| FORD   | RESEARCH    |
| JONES  | RESEARCH    |
| KING   | ACCOUNTING  |
| SCOTT  | RESEARCH    |
+--------+-------------+
    
    8. Display job-wise total salary along with total salary of all employees.
    
select distinct job, sum(sal) over(partition by job) jobwise_sal, sum(sal) over() total_sal from emp_staging;
+------------+--------------+------------+
|    job     | jobwise_sal  | total_sal  |
+------------+--------------+------------+
| ANALYST    | 6000.0       | 29025.0    |
| CLERK      | 4150.0       | 29025.0    |
| MANAGER    | 8275.0       | 29025.0    |
| PRESIDENT  | 5000.0       | 29025.0    |
| SALESMAN   | 5600.0       | 29025.0    |
+------------+--------------+------------+

    
    9. Display dept-wise total salary along with total salary of all employees.
    
select distinct deptno, sum(sal) over(partition by deptno) deptwise_sal, sum(sal) over() total_sal from emp_staging;
+---------+---------------+------------+
| deptno  | deptwise_sal  | total_sal  |
+---------+---------------+------------+
| 10      | 8750.0        | 29025.0    |
| 20      | 10875.0       | 29025.0    |
| 30      | 9400.0        | 29025.0    |
+---------+---------------+------------+

    
    10. Display per dept job-wise total salary along with total salary of all employees.
    
select deptno,job, sum(sal) deptjobwise_sal,  
(select sum(sal) from emp) total_sal
from emp_staging group by deptno,job; 
+---------+------------+------------------+------------+
| deptno  |    job     | deptjobwise_sal  | total_sal  |
+---------+------------+------------------+------------+
| 20      | ANALYST    | 6000.0           | 29025.0    |
| 10      | CLERK      | 1300.0           | 29025.0    |
| 20      | CLERK      | 1900.0           | 29025.0    |
| 30      | CLERK      | 950.0            | 29025.0    |
| 10      | MANAGER    | 2450.0           | 29025.0    |
| 20      | MANAGER    | 2975.0           | 29025.0    |
| 30      | MANAGER    | 2850.0           | 29025.0    |
| 10      | PRESIDENT  | 5000.0           | 29025.0    |
| 30      | SALESMAN   | 5600.0           | 29025.0    |
+---------+------------+------------------+------------+

    
    11. Display number of employees recruited per year in descending order of employee count.
    
select year(hire), count(empno) from emp_staging
group by year(hire)
order by count(empno) desc;
+-------+------+
|  _c0  | _c1  |
+-------+------+
| 1981  | 10   |
| 1982  | 2    |
| 1983  | 1    |
| 1980  | 1    |
+-------+------+

    
    12. Display unique job roles who gets commission.
    
select distinct job from emp_staging
where comm is not null;
+-----------+
|    job    |
+-----------+
| SALESMAN  |
+-----------+

    
    13. Display dept name in which there is no employee (using sub-query).
    
select dname from dept_staging d 
where d.deptno not in (select distinct deptno from emp_staging);
+-------------+
|    dname    |
+-------------+
| OPERATIONS  |
+-------------+

    
    14. Display emp-name, dept-name, salary, total salary of that dept (using sub-query).
    
select ename, dname, sal, 
(select sum(sal) from emp_staging where deptno = e.deptno) as total_sal
from emp_staging e
inner join dept d on d.deptno = e.deptno;
+---------+-------------+---------+------------+
|  ename  |    dname    |   sal   | total_sal  |
+---------+-------------+---------+------------+
| SMITH   | RESEARCH    | 800.0   | 10875.0    |
| ALLEN   | SALES       | 1600.0  | 9400.0     |
| WARD    | SALES       | 1250.0  | 9400.0     |
| JONES   | RESEARCH    | 2975.0  | 10875.0    |
| MARTIN  | SALES       | 1250.0  | 9400.0     |
| BLAKE   | SALES       | 2850.0  | 9400.0     |
| CLARK   | ACCOUNTING  | 2450.0  | 8750.0     |
| SCOTT   | RESEARCH    | 3000.0  | 10875.0    |
| KING    | ACCOUNTING  | 5000.0  | 8750.0     |
| TURNER  | SALES       | 1500.0  | 9400.0     |
| ADAMS   | RESEARCH    | 1100.0  | 10875.0    |
| JAMES   | SALES       | 950.0   | 9400.0     |
| FORD    | RESEARCH    | 3000.0  | 10875.0    |
| MILLER  | ACCOUNTING  | 1300.0  | 8750.0     |
+---------+-------------+---------+------------+

    

    15. Display all managers and presidents along with number of (immediate) subbordinates.
    
SELECT e1.ename AS mname,
       e1.job,
       COUNT(e2.empno) AS num_subordinates
FROM emp_staging e1
LEFT JOIN emp_staging e2 ON e1.empno = e2.mgr
WHERE e1.job IN ('MANAGER', 'PRESIDENT')
GROUP BY e1.empno, e1.ename, e1.job;
+--------+------------+-------------------+
| mname  |   e1.job   | num_subordinates  |
+--------+------------+-------------------+
| JONES  | MANAGER    | 2                 |
| BLAKE  | MANAGER    | 5                 |
| CLARK  | MANAGER    | 1                 |
| KING   | PRESIDENT  | 3                 |
+--------+------------+-------------------+

3. Execute following queries for books.csv dataset.
    1. Create table "books_staging" and load books.csv in it.
    
create table books_staging (
bookid INT,
name STRING,
author STRING,
subject STRING,
price DOUBLE
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

LOAD DATA LOCAL INPATH '/home/sunbeam/Desktop/Modules/BigData/data/books.csv'
INTO TABLE books_staging; 
    
    2. Create table "books_orc" as transactional table.
    
create table books_orc (
    bookid INT,
    name STRING,
    author STRING,
    subject STRING,
    price DOUBLE
)
STORED AS ORC
TBLPROPERTIES('transactional' = 'true');

insert into books_orc select * from books_staging;
    
    3. Create a materialized view for summary -- Subjectwise average book price.
    
create materialized view mv_books_orc as
select subject, avg(price) from books_orc
group by subject;
    
select * from mv_books_orc;

+-----------------------+--------------------+
| mv_books_orc.subject  |  mv_books_orc._c1  |
+-----------------------+--------------------+
| C Programming         | 242.20275          |
| C++ Programming       | 675.214            |
| Java Programming      | 519.67             |
| Operating Systems     | 447.3836666666666  |
+-----------------------+--------------------+

    
    4. Display a report that shows subject and average price in descending order -- on materialized view.
    
SELECT * FROM mv_books_orc ORDER BY avg_price DESC;
    
	+-----------------------+-------------------------+
	| mv_books_orc.subject  | mv_books_orc.avg_price  |
	+-----------------------+-------------------------+
	| C++ Programming       | 675.214                 |
	| Java Programming      | 519.67                  |
	| Operating Systems     | 447.3836666666666       |
	| C Programming         | 242.20275               |
	+-----------------------+-------------------------+
    
    5. Create a new file newbooks.csv.
        ```
        20,Atlas Shrugged,Ayn Rand,Novel,723.90
        21,The Fountainhead,Ayn Rand,Novel,923.80
        22,The Archer,Paulo Cohelo,Novel,623.94
        23,The Alchemist,Paulo Cohelo,Novel,634.80
        ```
    6. Upload the file newbooks.csv into books_staging.
    
load data local inpath '/home/sunbeam/Desktop/Modules/BigData/data/newbooks.csv' into table books_staging;
    
    7. Insert "new" records from books_staging into books_orc.
    
insert into books_orc select * from books_staging;
    
    8. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?
    
select * from mv_books_orc;
+-----------------------+--------------------+
| mv_books_orc.subject  |  mv_books_orc._c1  |
+-----------------------+--------------------+
| C Programming         | 242.20275          |
| C++ Programming       | 675.214            |
| Java Programming      | 519.67             |
| Operating Systems     | 447.3836666666666  |
+-----------------------+--------------------+

    
    9. Rebuild the materialized view.
    
alter materialized view mv_books_orc rebuild;
    
    10. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?
    
select * from mv_books_orc
order by `_c1` desc;
+-----------------------+--------------------+
| mv_books_orc.subject  |  mv_books_orc._c1  |
+-----------------------+--------------------+
| Novel                 | 726.6099999999999  |
| C++ Programming       | 675.214            |
| Java Programming      | 519.67             |
| Operating Systems     | 447.3836666666666  |
| C Programming         | 242.20275          |
+-----------------------+--------------------+

    11. Increase price of all Java books by 10% in books_orc.
    
update books_orc set price = 1.1 * price
where subject = "Java Programming"
    
    12. Rebuild the materialized view.
    
alter materialized view mv_books_orc rebuild;
    
    13. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new price changes visible in report?
    
select * from mv_books_orc
order by `_c1` desc;

+-----------------------+--------------------+
| mv_books_orc.subject  |  mv_books_orc._c1  |
+-----------------------+--------------------+
| Novel                 | 726.6099999999999  |
| C++ Programming       | 675.214            |
| Java Programming      | 571.6370000000001  |
| Operating Systems     | 447.3836666666666  |
| C Programming         | 242.20275          |
+-----------------------+--------------------+
    
    14. Delete all Java books.
    
delete from books_orc where subject = "Java Programming";

    
    15. Rebuild the materialized view.
    
  alter materialized view mv_books_orc rebuild;  
    
    16. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new price changes visible in report?
    
select * from mv_books_orc
order by `_c1` desc;

+-----------------------+--------------------+
| mv_books_orc.subject  |  mv_books_orc._c1  |
+-----------------------+--------------------+
| Novel                 | 726.6099999999999  |
| C++ Programming       | 675.214            |
| Operating Systems     | 447.3836666666666  |
| C Programming         | 242.20275          |
+-----------------------+--------------------+

4. Upload busstops.json data into HDFS directory. Then create hive external table to fetch data using JsonSerDe.
    ```
    {"_id":{"$oid":"5a0720b478597fc11004d951"},"stop":"Non-BRTS","code":"103B-D-04","seq":4.0,"stage":1.0,"name":"Aranyeshwar Corner","location":{"type":"Point","coordinates":[73.857675,18.486381]}}
    ```
    ``` 
    location STRUCT<type:STRING, coordinates:ARRAY<DOUBLE>>
    ```
    ```
    When column-name have special charatcters like _ or $, they should be encapsulated in `back-quotes`.
    ```
hadoop fs -mkdir -p /user/$USER/busstops/input

hadoop fs -put /home/sunbeam/Desktop/Modules/BigData/data/bus.json /user/$USER/busstops/input

hadoop fs -ls /user/$USER/busstops/input


create external table busstop_staging (
`_id` STRUCT<`$oid`:STRING>,
stop STRING,
code STRING,
seq FLOAT,
stage FLOAT,
name STRING,
location STRUCT<type: STRING, coordinates: ARRAY<DOUBLE>>
)
ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/user/sunbeam/busstops/input';

5. Implement Movie recommendation system.
    * Example Input Data
        ```
        userId,movieId,rating,rtime
        17,70,3,0
        35,21,1,0
        49,19,2,0
        49,21,1,0
        49,70,4,0
        87,19,1,0
        87,21,2,0
        98,19,2,0
        ```
    * Create pairs of movies rated by same user.
        ```
        userId,movie1,rating1,movie2,rating2
        49,21,1.0,70,4.0
        49,19,2.0,21,1.0
        49,19,2.0,70,4.0
        87,19,1.0,21,2.0
        ```
    * Create correlation table.
        ```
        movie1,movie2,cnt,cor
        19,21,2,-1.0
        19,70,1,0.0
        21,70,1,0.0
        ```
    * Predict Similar movies for given movie Id. Get the recommended movies titles from movies table.
    * Hints
        * Start with above small data tables to test accuracy of the steps.
        * You will need to create new intermediate tables to store results of earlier queries.
        * For main data use ORC format to speed-up the queries.
        * You may need to change reducer tasks memory for quicker execution and avoid OutOfMemory errors.
            * SET mapreduce.reduce.memory.mb = 4096;
            * SET mapreduce.reduce.java.opts = -Xmx4096m;
            
create table ratings (uid int, mid int, rating double, rtime timestamp)
STORED AS ORC
TBLPROPERTIES('transactional'='true');

insert into ratings
select uid, mid, rating, FROM_UNIXTIME(rtime) from rating_staging;

create view user_movies as 
select rt1.uid, rt1.mid m1, rt1.rating r1, rt2.mid m2, rt2.rating r2
from ratings rt1 inner join ratings rt2
on rt1.uid = rt2.uid
where rt1.mid < rt2.mid;

create materialized view corr_movies as
select m1, m2, count(m1) cnt, corr(r1,r2) cor 
from user_movies
group by m1,m2
having corr(r1,r2) is not null; 

select m1, m2 from corr_movies
where cnt > 20 and cor > 0.7 and (m1 = 858 or m2 = 858);

+------+-------+
|  m1  |  m2   |
+------+-------+
| 858  | 1221  |
+------+-------+

create view recommend_movies as
select c.m1, c.m2, m.movieid, m.title from movies m
inner join corr_movies c on (c.m1 = m.movieid or c.m2 = m.movieid)
where c.cnt > 20 and c.cor > 0.7;

select * from recommend_movies 
where m1 = 858 or m2 = 858;
